
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_oppo_testframebuffer_TestFrameBuffer */

#include "Md2Spec.h"

#ifndef _Included_MdModel_H
#define _Included_MdModel_H
#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
    jfieldID compressed;
    jfieldID reverseNormal;
    jfieldID enableShadow;
    jfieldID enableBack;
    jfieldID regionFrame;
    jfieldID enableNormal;
    jfieldID init;
    jfieldID scale;
    jfieldID scaleX;
    jfieldID scaleY;
    jfieldID width;
    jfieldID height;
} md2_config_field_t;

typedef struct {
    jfieldID vertexBuffer;
    jfieldID texCoordBuffer;
    jfieldID normalBuffer;
    jfieldID vertexShadowBuffer;
    jfieldID normalBackBuffer;
    jfieldID colorShadowBuffer;
} md2_render_buffer_field_t;


JNIEXPORT jint JNICALL md2LoadModel(JNIEnv *env, jobject obj, jint dataLen, jbyteArray modelData, 
		jobject configObj, jintArray modelRef);

JNIEXPORT jint JNICALL md2GetNumTriangles(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT void JNICALL md2SetFrame(JNIEnv *env, jobject obj, jint ref, jfloat frame);

JNIEXPORT jfloat JNICALL md2GetCurrentFrames(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT jint JNICALL md2GetTotalFrames(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT void JNICALL md2FillRenderBuffer(JNIEnv *env, jobject obj, jint ref, jobject configObj, jobject bufferObj);
	
JNIEXPORT void JNICALL md2FillRenderBufferII(JNIEnv *env, jobject obj, jint ref, jobject configObj, jobject bufferObj);

JNIEXPORT void JNICALL md2SetDirtFlag(JNIEnv *env, jobject obj, jint ref, jboolean dirtFlag);

JNIEXPORT void JNICALL md2GetTextureCoordsBuffer(JNIEnv *env, jobject obj, jint ref, jobject texCoorBuffer);

JNIEXPORT void JNICALL md2GetRegionVertexBuffer(JNIEnv *env, jobject obj, jint ref, jobject vertexBuffer);

JNIEXPORT void JNICALL md2GetRegionNormalBuffer(JNIEnv *env, jobject obj, jint ref, jobject normalBuffer);

JNIEXPORT void JNICALL md2GetShadowColorBuffer(JNIEnv *env, jobject obj, jint ref, jobject colorBuffer);

JNIEXPORT void JNICALL md2SetShadowHeight(JNIEnv *env, jobject obj, jint ref, jfloat height);

JNIEXPORT void JNICALL md2SetShadowParameters(JNIEnv *env, jobject obj, jint ref, jfloat color, jfloat alpha);

JNIEXPORT void JNICALL md2GetSphereCenter(JNIEnv *env, jobject obj, jint ref, jfloatArray centerData);

JNIEXPORT jfloat JNICALL md2GetSphereRadius(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT void JNICALL md2SetKeyVertex(JNIEnv *env, jobject obj, jint ref, jint type);

JNIEXPORT void JNICALL md2SetKeyPosition(JNIEnv *env, jobject obj, jint ref, jfloat x, jfloat y);

JNIEXPORT jfloat JNICALL md2GetMinCoordinate(JNIEnv *env, jobject obj, jint ref, jfloat frame, jint dimension, jintArray indexData);

JNIEXPORT jfloat JNICALL md2GetMaxCoordinate(JNIEnv *env, jobject obj, jint ref, jfloat frame, jint dimension, jintArray indexData);

JNIEXPORT jfloat JNICALL md2GetFrame(JNIEnv *env, jobject obj, jint ref, jint dimension, jint index, jfloat coordinate);

JNIEXPORT void JNICALL md2ReleaseModel(JNIEnv *env, jobject obj, jint ref);

bool loadMdHeader(md2_model_t* pMdModel, byte* data);

bool loadMdSkin(md2_model_t* pMdModel, byte* data);

bool loadMdTexCoord(md2_model_t* pMdModel, byte* data, bool compressed);

bool loadMdTriangles(md2_model_t* pMdModel, byte* data);

bool loadMdFrames(md2_model_t* pMdModel, byte* data, bool compressed, bool reverseNormal, int regionFrame);

bool initMdTexCoordBuffer(md2_model_t* pMdModel);

bool initMdShadowColorBuffer(md2_model_t* pMdModel, bool enableShadow);

void fillFrameBuffer(md2_model_t* pMdModel, float shadowBaseY, float* pfVertexBuffer,
		float* pfNormalBuffer, float* pfVertexShadowBuffer, float* pfNormalBackBuffer);

void initRegionVertex(md2_model_t* mdModle);

int vertexPositionCompare(float src, float dest, int precision);

int register_com_oppo_model_md2_config(JNIEnv* env);

int register_com_oppo_model_md2_render_buffer(JNIEnv* env);

#ifdef __cplusplus
}
#endif
#endif
