
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_oppo_testframebuffer_TestFrameBuffer */

#include "Ms3dSpec.h"

#ifndef _Included_MsModel_H
#define _Included_MsModel_H
#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
    jfieldID enableNormal;
    jfieldID enableShadow;
    jfieldID scaleX;
    jfieldID scaleY;
} ms3d_config_field_t;

typedef struct {
    jfieldID vertexBuffer;
    jfieldID texCoordBuffer;
    jfieldID normalBuffer;
    jfieldID vertexShadowBuffer;
    jfieldID colorShadowBuffer;
} ms3d_render_buffer_field_t;


JNIEXPORT jint JNICALL ms3dLoadModel(JNIEnv *env, jobject obj,
	jint dataLen, jbyteArray modelData, jobject configObj, jintArray modelRef);

JNIEXPORT void JNICALL ms3dSetupJoints(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT void JNICALL ms3dSetFrame(JNIEnv *env, jobject obj, jint ref, jfloat frame);

JNIEXPORT void JNICALL ms3dFillRenderBuffer(JNIEnv *env, jobject obj, jint ref, jobject configObj, jobjectArray bufferObjs);

JNIEXPORT void JNICALL ms3dSetDirtFlag(JNIEnv *env, jobject obj, jint ref, jint dirtFlag);

JNIEXPORT jfloat JNICALL ms3dGetAnimationFps(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT jint JNICALL ms3dGetTotalFrames(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT jint JNICALL ms3dContainsAnimation(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT void JNICALL ms3dGetShadowVertexBuffer(JNIEnv *env, jobject obj, jint ref, jint index, jobject vertexBuffer);

JNIEXPORT void JNICALL ms3dGetShadowColorBuffer(JNIEnv *env, jobject obj, jint ref, jint index, jobject colorBuffer);

JNIEXPORT void JNICALL ms3dSetShadowHeight(JNIEnv *env, jobject obj, jint ref, jfloat height);

JNIEXPORT void JNICALL ms3dSetShadowParameters(JNIEnv *env, jobject obj, jint ref, jfloat color, jfloat alpha);

JNIEXPORT void JNICALL ms3dGetTextureCoordsBuffer(JNIEnv *env, jobject obj, jint ref, jint index, jobject texCoorBuffer);

JNIEXPORT jint JNICALL ms3dGetNumGroups(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT jint JNICALL ms3dGetNumTriangles(JNIEnv *env, jobject obj, jint ref, jint index);

JNIEXPORT jint JNICALL ms3dGetNumMaterials(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT jbyte JNICALL ms3dGetMaterialIndex(JNIEnv *env, jobject obj, jint ref, jint index);

JNIEXPORT void JNICALL ms3dGetMaterial(JNIEnv *env, jobject obj, jint ref, jint index, jfloatArray ambient,
	jfloatArray diffuse, jfloatArray specular, jfloatArray emissive, jfloatArray shininess, jfloatArray transparency, jshortArray mode, jbyteArray texture);

JNIEXPORT jint JNICALL ms3dGetTransparencyMode(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT jfloat JNICALL ms3dGetAlphaRef(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT void JNICALL ms3dGetSphereCenter(JNIEnv *env, jobject obj, jint ref, jfloatArray centerData);

JNIEXPORT void JNICALL ms3dGetSphereMax(JNIEnv *env, jobject obj, jint ref, jfloatArray maxData);

JNIEXPORT void JNICALL ms3dGetSphereMin(JNIEnv *env, jobject obj, jint ref, jfloatArray minData);

JNIEXPORT jfloat JNICALL ms3dGetSphereRadius(JNIEnv *env, jobject obj, jint ref);

JNIEXPORT jint JNICALL ms3dIntersect(JNIEnv *env, jobject obj, jint ref,
	jfloatArray rayData, jfloatArray posData);
	
JNIEXPORT jint JNICALL ms3dGetGroupTexture(JNIEnv *env, jobject obj, jint ref,
	jint groupIndex, jbyteArray textureData);
	
JNIEXPORT jint JNICALL ms3dGetTextureInfo(JNIEnv *env, jobject obj, jint ref,
	jint index, jbyteArray textureData);

JNIEXPORT void JNICALL ms3dReleaseModel(JNIEnv *env, jobject obj, jint ref);


bool loadMsVertex(ms3d_model_t* pMsModel, byte* data);

bool loadMsTriangle(ms3d_model_t* pMsModel, byte* data);

bool loadMsGroup(ms3d_model_t* pMsModel, byte* data);

bool loadMsMaterial(ms3d_model_t* pMsModel, byte* data);

bool loadMsJoint(ms3d_model_t* pMsModel, byte* data);

bool loadMsComment(ms3d_model_t* pMsModel, byte* data, int length);

bool loadMsExtra(ms3d_model_t* pMsModel, byte* data, int length);

bool initMsBuffer(ms3d_model_t* pMsModel, bool enableShadow);

int findJointByName(ms3d_model_t* msModel, char* name);

void setupTangents(ms3d_model_t* msModel);

void evaluateJoint(ms3d_model_t* msModel, int index, float frame);

void transformVertex(ms3d_model_t* msModel, ms3d_vertex_t* vertex, vector3f_t* out);

void transformNormal(ms3d_model_t* msModel, ms3d_vertex_t* vertex, vector3f_t normal, vector3f_t* out);

void fillJointIndicesAndWeights(ms3d_vertex_t* vertex, int jointIndices[4], int jointWeights[4]);

void setTriangelPos(vector3f_t* trianglePosOut, vector3f_t v0, vector3f_t v1, vector3f_t v2);

void checkAddTexture(ms3d_model_t* msModel, char* name);

void readVertexFromBuffer(float* buffer, int offset, vector3f_t* v);

int register_com_oppo_model_ms3d_config(JNIEnv* env);

int register_com_oppo_model_ms3d_render_buffer(JNIEnv* env);

#ifdef __cplusplus
}
#endif
#endif
